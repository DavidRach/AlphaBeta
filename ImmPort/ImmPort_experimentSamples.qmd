---
title: "ImmPort_experimentSamples"
format: html
---

Working this process out programmatically from code to simplify the template completion. 

# treatments.txt

Please note, when no treatment is selected, nothing needs to be inputed in the amounts listed category (took three attempts of the validate tool to figure this one out)

```{r}
Alpha <- "Something"

treatments <- data.frame(
    `User Defined ID`=Alpha, #ICS_PMA
    `Name`=Alpha, #PMA ionomycin with Brefelden Monensin
    `Use Treatment`=Alpha, #Yes
    `Amount Value`=Alpha, # 2
    `Amount Unit`=Alpha, # ul
    `Duration Value`=Alpha, # 6
    `Duration Unit`=Alpha, # Hours
    `Temperature Value`=Alpha, # 37
    `Temperature Unit`=Alpha, # C
    `Comments`=Alpha, #eBioscience Cell Stimulation Cockatail (500x), 2 ul per ml
    check.names=FALSE
)

#Uploading treatments.txt, Cord blood mononuclear cells were treated with golgi transport inhibitors, in the presence or absence of PMA/ionomycin
```

# reagents.Flow_Cytometry.txt

Ok, let's make this easy, and just tidy-rearrange the data from the CordBloodILT repo:

```{r}
library(dplyr)
Panel <- read.csv("ImmPort/ILT_Antibody_Panels.csv", check.names=FALSE)
Panel <- Panel |> mutate(UserDefinedID=paste(Fluorophore, Marker, sep=" ")) |> relocate(UserDefinedID, .before=1) |> filter(Panel %in% "Spectral")
colnames(Panel)

Panel1 <- Panel |> select(UserDefinedID, Manufacturer, Catalog.Number, Marker, Clone, Fluorophore)
Panel2 <- Panel1 |> mutate(Name="", Description="", LotNumber="", Weblink="", Contact="", AntibodyRegistryID="") |> relocate(Name, Description, .after=UserDefinedID) |> relocate(LotNumber, Weblink, Contact, .after=Catalog.Number) |> relocate(AntibodyRegistryID, .after=Marker)
write.csv(Panel2, "ImmPort/CompletedTemplates/IntermediateReagents.csv", row.names=FALSE)

# Reagents for the spectral flow cytometry panel
```

From there, copy paste over, and edit the markers that are present on the list. 

# Reagent_Sets.txt

Similarly, we can go ahead and specify whether a file is stained for tetramer or for antibody. 

```{r}
Items <- Panel2 |> pull(UserDefinedID)
paste(Items, collapse = "; ")
```



# subjectHumans.txt

```{r}
library(dplyr)

#UserDefinedID = "study_1716"
#HEU-hi = "arm-cohort_1716_1" # ARM11928
#HEU-lo = "arm-cohort_1716_2" # ARM11929
#HU = "arm-cohort_1716_3" # ARM11930

Participants <- read.csv("ImmPort/Metadata.csv", check.names=FALSE)

Assembly <- Participants |> select(bid, ptype, infant_sex) |> mutate(`MinSubjectAge`=0) |> mutate(`MaxSubjectAge`="") |> mutate(AgeUnit="Not Specified") |>
    mutate(AgeEvent="Age at Study Day 0") |> mutate(AgeEventSpecificity="", SubjectPhenotype="", SubjectLocation="Malawi") |> mutate(Ethnicity="Not Hispanic or Latino", Race="Black or African American") |> mutate(RaceSpecificity="", Description="", ResultSeparator="") |> mutate(ExposureProcessReported="no exposure") |> mutate(ExposureMaterialReported="") |> mutate(ExposureMaterialID="")|>
mutate(DiseaseReported="") |> mutate(DiseaseOntologyID="") |> mutate(DiseaseStageReported="")

Assembly <- Assembly |> mutate(ptype = case_when(
    ptype == "HEU-hi" ~ "arm-cohort_1716_1",
    ptype == "HEU-lo" ~ "arm-cohort_1716_2",
    ptype == "HU" ~ "arm-cohort_1716_3",
    TRUE ~ NA_character_
  ))

Assembly <- Assembly |> filter(!bid %in% "INF052")

write.csv(Assembly, "ImmPort/CompletedTemplates/IntermediateSubjectHuman.csv", row.names=FALSE)
```

The above on attempted validation went straight to archived without checking, probably needs a complete data bundle to work. 

# experimentSamples

The final piece of the archway, needs to communicate correctly with all the other metadata bits for successful data deposition. Lets work through this piecemeal. 

```{r}
External <- file.path("F:", "ImmPort")
Experiments <- list.files(path=External, include.dirs=TRUE, full.names=TRUE)
#x <- Experiments[1]
```

```{r}
library(dplyr)
library(stringr)

ProcessingFunction <- function(x){
    Experiment <- basename(x)
    ListFiles <- list.files(x)
    Data <- data.frame(filename=ListFiles, check.names=FALSE)
    Data <- Data |> 
         mutate(Experiment=ListFiles) |> mutate(bid="") |>
         mutate(Experiment=str_extract(Experiment, "ILT_[0-9]{2}")) |>
         mutate(bid = case_when(
            str_detect(filename, "Reference") & str_detect(filename, "Cells") ~ "ND006",
            str_detect(filename, "INF[0-9]{3}") ~ str_extract(filename, "INF[0-9]{3}"),
            str_detect(filename, "ND[0-9]{3}") ~ str_extract(filename, "ND[0-9]{3}"),
            str_detect(filename, "NY[0-9]{3}") ~ str_extract(filename, "NT[0-9]{3}"),
            TRUE ~ bid))

    Data <- Data |> mutate(Designation = case_when(
        str_detect(filename, "Unstained") ~ "Unstained",
        str_detect(filename, "Reference Group-DR_.* \\(Cells\\)") ~ 
        str_extract(filename, "(?<=Reference Group-DR_)[^\\(]+(?= \\(Cells\\))") |>
        str_replace("^([^ ]+) (.+)$", "\\2 \\1"),
        TRUE ~ "Sample")) 

    Data <- Data |> mutate(Condition =case_when(
        str_detect(filename, "Ctrl_Antibody") ~ "Ctrl_Antibody",
        str_detect(filename, "Ctrl_TetramerControl") ~ "Ctrl_TetramerControl",
        str_detect(filename, "Ctrl_Tetramer.") ~ "Ctrl_Tetramer",
        str_detect(filename, "PMA_Antibody") ~ "PMA_Antibody",
        TRUE ~ "Reference Control"))

    Data <- Data |> mutate(Treatment =case_when(
        str_detect(filename, "Ctrl") ~ "Ctrl",
        str_detect(filename, "PMA") ~ "PMA",
        TRUE ~ "Reference Control"))

    Data <- Data |> mutate(Condition = case_when(
      !is.na(Condition) ~ str_remove_all(Condition, "Ctrl_|PMA_|Ctr_"),
      TRUE ~ Condition))
    
    Data <- Data |> mutate(Treatment = case_when(
      Condition == "Reference Control" & 
        str_detect(Designation, "TNFa|IFNg|CD69|CD107a|PMA") ~ "PMA",
      Condition == "Reference Control" & 
        !str_detect(Designation, "TNFa|IFNg|CD69|CD107a|PMA") ~ "Ctrl",
      TRUE ~ Treatment))

    Data <- Data |> mutate(ExpsampleID=paste0("FCS_", row_number())) |>
         mutate(BiosampleID="") |> rename(ExperimentID=Experiment, TreatmentID=Treatment) |>
         mutate(ReagentID="") |>
         relocate(ExpsampleID, BiosampleID, ExperimentID, ReagentID, TreatmentID, .before=1) |>
         mutate(CompFiles="", ExpsampleName="", ExpsampleDescription="", AdditionalResults="") |>
         relocate(CompFiles, ExpsampleName, ExpsampleDescription, AdditionalResults, .after=TreatmentID) |>
         mutate(StudyID="study_1716") |> mutate(protocolIDs="") |> rename(SubjectID=bid) |>
         mutate(PlannedVisitID="") |> relocate(StudyID, protocolIDs, SubjectID, PlannedVisitID, .after=AdditionalResults)

    Data <- Data |> mutate(Type=case_when(
        str_detect(SubjectID, "INF") ~ "Cord blood",
        str_detect(filename, "ord") ~ "Cord blood",
        TRUE ~ "PBMC" ))

    Data <- Data |> mutate(Subtype="", BiosampleName="", BiosampleDescription="") |>
        mutate(StudyTimeCollected="0", StudyTimeCollectedUnit="Days",
        StudyTimeToEvent="Not Specified", StudyTimeToEventSpecify="") |>
        mutate(ExperimentName="", ExperimentDescription="",
        MeasurementTechnique="Spectral Flow Cytometry")

    # Finer Edits:
    Data1 <- Data |> mutate(ExpsampleID=filename)
    Data1$ExpsampleID <- gsub("DTR_2023_", "", Data1$ExpsampleID)
    Data1$ExpsampleID <- gsub(".fcs", "", fixed=TRUE, Data1$ExpsampleID)

    Data1 <- Data1 |> mutate(BiosampleID=SubjectID)

    Data1 <- Data1 |> mutate(ReagentID = case_when(
      Condition == "Antibody" ~ "AntibodyPanel",
      Condition == "Tetramer" ~ "TetramerPanel",
      Condition == "TetramerControl" ~ "TetramerControlPanel",
      Condition == "Reference Control" & Designation == "Unstained" ~ "Unstained",
      Condition == "Reference Control" & Designation != "Unstained" ~ Designation,
      TRUE ~"NA"))

    Data1 |> pull(ReagentID) |> unique()

    Data1 <- Data1 |> mutate(ReagentID = case_when(
      ReagentID == "BUV615 CCR4" ~ "BUV615 CD194",
      ReagentID == "BUV737 CXCR3" ~ "BUV737 CD183",
      ReagentID == "BV650 CCR7" ~ "BV650 CD197",
      ReagentID == "BV786 CCR6" ~ "BV786 CD196",
      ReagentID == "PE NKG2D" ~ "PE CD314",
      ReagentID == "PE-Vio 770 PD1" ~ "PE-Vio 770 CD279",
      ReagentID == "Pacific Blue Dump_CD14" ~ "Pacific Blue CD14",
      ReagentID == "Pacific Blue Dump_CD19" ~ "Pacific Blue CD19",
      ReagentID == "APC CD3_PMA" ~ "APC CD3",
      ReagentID == "Zombie NIR Viability_PMA" ~ "Zombie NIR Viability",
      ReagentID == "BUV661 VD2" ~ "BUV661 Vd2",
      TRUE ~ ReagentID
    ))

    Data1 <- Data1 |> mutate(ReagentID = case_when(
      ReagentID == "PE-Vio770 PD1" ~ "PE-Vio 770 CD279",
      ReagentID == "PE-Dazzle594 TNFa" ~ "PE-Dazzle 594 TNFa",
      ReagentID == "Pacific Blue Dump_CD19" ~ "Pacific Blue CD19",
      ReagentID == "APC CD3_PMA" ~ "APC CD3",
      ReagentID == "Zombie NIR Viability_PMA" ~ "Zombie NIR Viability",
      ReagentID == "BUV661 VD2" ~ "BUV661 Vd2",
      TRUE ~ ReagentID
    ))

    #Data1 <- Data1 |> mutate(ReagentID = case_when(
    #  ReagentID == AntibodyPanel ~ "LongList",
    #  ReagentID == TetramerPanel ~ "LongList",
    #  ReagentID == TetramerControlPanel ~ "LongList",
    #  TRUE ~ ReagentID
    #))

    Data1 <- Data1 |> mutate(TreatmentID = case_when(
      TreatmentID == "Ctrl" ~ "ICS_Media",
      TreatmentID == "PMA" ~ "ICS_PMA",
      TRUE ~ TreatmentID))

    Data1 <- Data1 |> mutate(protocolIDs="protocol_1716_1")
    Data1 <- Data1 |> mutate(PlannedVisitID="plannedvisit_1716_1")

    Data1 <- Data1 |> mutate(Type = case_when(
      str_detect(ExpsampleID, "Beads") ~ "Other",
      TRUE ~ Type))

    Data1 <- Data1 |> mutate(Subtype = case_when(
      Type == "Other" ~ "Beads",
      TRUE ~ ""))

    Data1 <- Data1 |> mutate(ExperimentName=ExperimentID)

    Data1 <- Data1 |> relocate(filename, .after=TreatmentID)

    Data1  <- Data1 |> select(-Designation, -Condition)

    #Data1 <- Data1 |> filter(BiosampleID %in% "INF052")
    #colnames(Data1)
    
    #write.csv(Data1, "ImmPort/CompletedTemplates/IntermediateExperiment.csv", row.names=FALSE)
    return(Data1)
  }
```

```{r}
Data <- ProcessingFunction(x=Experiments[1])

TheseIndividuals <- Data |> pull(BiosampleID) |> unique()

SelectAssembly <- Assembly |> filter(bid %in% TheseIndividuals)

SubjectHumans <- paste0("subjectHumans_", Experiment, ".csv")
ExpFiles <- paste0("experimentFiles_", Experiment, ".csv")

HumanStorage <- file.path("ImmPort", "CompletedTemplates", SubjectHumans)
ExpStorage <- file.path("ImmPort", "CompletedTemplates", ExpFiles)

write.csv(SelectAssembly, HumanStorage, row.names=FALSE)
write.csv(Data, ExpStorage, row.names=FALSE)
```

```{r}
Data <- purrr::map(.x=Experiments[1:15], .f=ProcessingFunction) |> bind_rows()

Experiment <- "AllSpecimens"

TheseIndividuals <- Data |> pull(BiosampleID) |> unique()

SelectAssembly <- Assembly |> filter(bid %in% TheseIndividuals)

SubjectHumans <- paste0("subjectHumans_", Experiment, ".csv")
ExpFiles <- paste0("experimentFiles_", Experiment, ".csv")

HumanStorage <- file.path("ImmPort", "CompletedTemplates", SubjectHumans)
ExpStorage <- file.path("ImmPort", "CompletedTemplates", ExpFiles)

write.csv(SelectAssembly, HumanStorage, row.names=FALSE)
#write.csv(Data, ExpStorage, row.names=FALSE)
```

Sigh... why is my solution to everything.... turn it into an R package *laugh*

```{r}
Alpha <- "Example Text"

experimentSamples.Flow_Cytometry <- data.frame(
    `ExpSample ID` = Alpha,
    `Biosample ID` = Alpha,
    `Experiment ID` = Alpha,
    `Reagent IDs` = Alpha,
    `Treatment IDs` = Alpha,
    `FCS Result File` = Alpha,
    `Compensation or Control File Names` = Alpha,
    `Expsample Name`= Alpha,
    `Expsample Description`= Alpha,
    `Additional Result File Names`= Alpha,
    `Study ID` = Alpha,
    `Protocol ID` = Alpha,
    `Subject ID` = Alpha,
    `Planned Visit ID` = Alpha,
    `Type`= c("Cord blood", "PBMC"),
    `Subtype`= Alpha,
    `Biosample Name` = Alpha,
    `Biosample Description`= Alpha,
    `Study Time Collected`= Alpha,
    `Study Time Collected Unit`= Alpha,
    `Study Time to Event` = Alpha,
    `Study Time to Event Specificity` = Alpha,
    `Experiment Name` = Alpha,
    `Experiment Description`= Alpha,
    `Measurement Technique` = "Spectral Flow Cytometry",
     check.names=FALSE)
```

