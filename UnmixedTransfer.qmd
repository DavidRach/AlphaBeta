---
title: "Automating transfer of unmixed .fcs files"
format: html
---

```{r}
#| message: false
#| warning: false
library(dplyr)
library(purrr)
library(HEULog)
```

We first navigate to our experiment folder and check for AlphaBeta experiments currently present

```{r}
Linux <- file.path("/home", "david", "Desktop")
WindowsHome <- file.path("C:", "CytekbioExport", "FcsFiles",
"Experiments", "David Rach")
WindowsLab <- file.path("C:", "CytekbioExport", "FcsFiles",
"Experiments", "David Rach")
WindowsAurora <- file.path("C:", "CytekbioExport", "FcsFiles",
"Experiments", "David Rach")

OperatingSystem <- Sys.info()["sysname"]
if(OperatingSystem == "Linux"){OS <- Linux
} else if (OperatingSystem == "Windows"){
    if (Sys.info()["user"] == "12692"){
        OS <- WindowsHome
        } else if (Sys.info()["user"] == "drach"){
        OS <- WindowsLab
        } else if (Sys.info()["user"] == "Aurora"){
        OS <- WindowsAurora
    }
} else {stop("Not currently set up for BSD or Mac, sorry")}

Experiments <- list.files(OS, pattern="AB_", full.names=TRUE)
```

```{r}
#| eval: FALSE

# Setup for data folder and ProcessedExperiments.csv
IsDataPresent <- list.files(include.dirs=TRUE)
if (!any(IsDataPresent %in% "data")){dir.create("data")}
CSVFiles <- list.files("data", pattern="ProcessedExperiments.csv")

if (length(CSVFiles) == 0){
    ProcessedExperiments <- data.frame(Experiment="Test", Date="01-01-2000")
    filename <- "ProcessedExperiments.csv"
    StorageLocation <- file.path("data", filename)
    write.csv(ProcessedExperiments, StorageLocation, row.names=FALSE)
}
```

Let's create some processing functions:


```{r}
#| eval: FALSE

#' Checks whether the folder has been transferred yet, and does so if not the case
#' 
#' @param x The folder being checked against the parsed names
#' @param parsed Retrieved processed experiment names
#' @param parentFolder Path to the Users Folder containing the Experiments
#' @param Experiment Folder name on the target External Hard Drive
#' @param Type Accepts "Raw" or "Unmixed"
#' @param Samples Accepts "samples", "unstained", "singlecolors"
#' 
#' @export
ExperimentParsed <- function(x, parsed, parentFolder, Experiment="AlphaBeta",
 Type="Unmixed", Samples="samples"){
    Status <- x %in% parsed
    ExperimentName <- x
    if (Status == TRUE){return(Status)}

    TargetFolder <- ExternalDriveLocate(Experiment=Experiment)
    OriginPath <- file.path(parentFolder, x)

    OriginFolders <- list.files(OriginPath)
    if (!Type %in% OriginFolders) {stop("Unmixed or Raw Folders not found in the origin folder")}

    OriginTarget <- file.path(OriginPath, Type)
    Groups <- list.files(OriginTarget)

    if (Samples=="samples"){
        Groups <- Groups[Groups != "Reference Group"]
    } else if (Samples == "singlecolors"){
        Groups <- Groups[Groups == "Reference Group"]
    } else if (Samples == "unstained"){
        Groups <- Groups # Need to selectively target Unstained here though
    } else {message("Only Ja knows")}

    # x <- Groups[1]
    purrr::walk(.x=Groups, .f=GroupTarget, ExperimentName=ExperimentName,
    OriginTarget=OriginTarget, TargetFolder=TargetFolder)

    TodaysDate <- Sys.Date()
    TodayData <- data.frame(Experiment=x, Date=TodaysDate)
    return(TodayData)
}

#' Working within an experiment, for designated group, transfers and renames individual specimens
#' 
#' @noRd
#' 
GroupTarget <- function(x, ExperimentName, OriginTarget, TargetFolder){
    Specimens <- file.path(OriginTarget, x)
    SpecimenList <- list.files(Specimens)
    GroupName <- x
    purrr::walk(.x=SpecimenList, .f=SpecimenTarget, ExperimentName=ExperimentName,
    GroupName=GroupName, OriginTarget=OriginTarget, TargetFolder=TargetFolder)
}

#' Working within an experiment, for designated group, transfers and renames individual specimens
#' 
#' @noRd
SpecimenTarget <- function(x, ExperimentName, GroupName, OriginTarget, TargetFolder){
    ConditionName <- x

    FilePath <- file.path(OriginTarget, GroupName, ConditionName)
    if (!file.exists(FilePath)) {stop("File not found: ", FilePath)}

    FCSFileName <- paste(ExperimentName, GroupName, ConditionName, sep="-")
    OutwardName <- file.path(TargetFolder, FCSFileName)

    file.copy(from=FilePath, to=OutwardName)
}

#' Checks for the presence of an external hard drive and designated root folder
#' 
#' @param Experiment Name of the folder in the external hard drives root
#' 
#' @return The file path to the Experiment Folder, or a stop message indicating couldn't locate the external drive
#' 
#' @export
#' 
#' @examples ExternalDriveLocate()
#'
ExternalDriveLocate <- function(Experiment){
    OperatingSystem <- Sys.info()["sysname"]

    if (OperatingSystem == "Windows"){
    drives <- system("wmic logicaldisk get name", intern = TRUE)
    drives <- drives[drives != ""][-1] 
    drives <- gsub("\\s+", "", drives)
    drives <- drives[drives != "C:"]
    External <- drives[drives != ""]

    if (length(External) == 0){stop("No External Drives detected, plug it in!")
    } else if (length(External) == 1) {
        ExternalFiles <- list.files(External, include.dirs=TRUE)
        if (!Experiment %in% ExternalFiles)(stop("Specified Experiment folder not present!"))
        Location <- file.path(External, Experiment)
    } else if (length(External > 1)) {
        stop("More than one external drive detected, searching")
    } else {stop("This shouldn't have happened")}

    } else if (OperatingSystem == "Linux"){
      stop("Code the part to detect media drives!")
    } else {stop("BSD and Mac not yet coded, sorry")}

    return(Location)
}
```


We then call to GitHub to check to see if any of these haven't been processed yet. 

```{r}
CSV <- paste(                                                
      "https://raw.githubusercontent.com",                  
      "DavidRach", "AlphaBeta",                   
      "main", "data", "ProcessedExperiments.csv",                              
      sep = "/"                                             
    ) 

Data <- read.csv(CSV, check.names=FALSE)
AlreadyProcessed <- Data |> pull(Experiment)

TheseFolders <- basename(Experiments)

UpdatedData <- purrr::map(.x=TheseFolders, .f=ExperimentParsed, parsed=AlreadyProcessed, parentFolder=OS)



#flatten(UpdatedData) # Need to edit to extract from list to allow for updating
#unlist(purrr::flatten(UpdatedData))

#NewlyProcessed <- bind_rows(Data, UpdatedData)
#write.csv(NewlyProcessed, "data/ProcessedExperiments.csv", row.names=FALSE)
```

