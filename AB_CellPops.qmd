---
title: "Frequency Cell Pops"
format: html
---

```{r}
library(dplyr)
library(Coereba)
```

```{r}
Data <- read.csv("data/openCytoRatios.csv", check.names=FALSE)
```

```{r}
shape_sex <- c("Female" = 22, "Male" = 21)
fill_sex <- c("Female" = "white", "Male" = "black")

shape_ptype <- c("HU" = 22, "HEU-lo" = 21, "HEU-hi" = 21)
fill_ptype <- c("HU" = "white", "HEU-lo" = "darkgray", "HEU-hi" = "black")

shape_art <- c("HU" = 22, "HEU" = 21)
fill_art <- c("HU" = "white", "HEU" = "black")

shape_viral <- c("NoViral" = 22, "Viral" = 21)
fill_viral <- c("NoViral" = "white", "Viral" = "black")
```

```{r}
library(ggplot2)
library(ggbeeswarm)

    data <- Data
    myfactor="timepoint"
    XAxisLevels <- c("0", "4", "9")
    var <- "CD8+"
    cex <- 2
    size <- 2
    corral.width <- 0.8
    shape_palette <- shape_ptype
    fill_palette <- fill_ptype

    if (!is.null(XAxisLevels)) {
        data[[myfactor]] <- factor(data[[myfactor]], levels = XAxisLevels)
    }

ggplot(data, aes(x = .data[["timepoint"]], y = .data[[var]])) +
  geom_boxplot(aes(group = interaction(.data[["timepoint"]], .data[["ptype"]]), 
        fill = .data[[myfactor]]),alpha = 0.5, show.legend = FALSE,
        position = position_dodge(width = 0.8),width = 0.6,outlier.shape = NA) +
  geom_beeswarm(show.legend = FALSE,
    aes(shape = .data[[myfactor]], fill = .data[[myfactor]], group = interaction(.data[["timepoint"]], .data[["ptype"]])), method = "center",
    side = 0, priority = "density", cex = cex, size = size, corral = "wrap",
    corral.width = corral.width, dodge.width = 0.8) +
  scale_shape_manual(values = shape_palette) +
  scale_fill_manual(values = fill_palette) +
  labs(title = NULL, x = NULL, y = NULL) +
  theme_bw() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    plot.title = element_text(hjust = 0.5, size = 8)
  )

```

```{r}

ggplot(MeltedData, aes(x = Marker, y = Value)) +
      geom_boxplot(aes(group = interaction(Marker, .data[[myfactor]]), 
      fill = .data[[myfactor]]), alpha = 0.5, show.legend = FALSE,
      position = position_dodge(width = 0.8), width = 0.6, outlier.shape = NA) +
      stat_summary(fun = median, geom = "crossbar", 
      aes(group = interaction(Marker, .data[[myfactor]])), width = 0.5,
      position = position_dodge(width = 0.8), show.legend = FALSE) +
      geom_beeswarm(show.legend = FALSE, aes(shape = .data[[myfactor]],
      fill = .data[[myfactor]]), method = "center", side = 0, priority = "density",
      cex = cex, size = size, corral = "wrap", corral.width = corral.width,
      dodge.width = 0.8) + scale_shape_manual(values = shape_palette) +
      scale_fill_manual(values = fill_palette) + 
      labs(title = NULL, x = NULL, y = NULL) + theme_bw() + 
      theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
      plot.title = element_text(hjust = 0.5, size = 8)




ggplot(data, aes(x = interaction(.data[["timepoint"]], .data[["ptype"]]), 
                 y = .data[[var]],
                 group = interaction(.data[["timepoint"]], .data[["ptype"]]))) +
    geom_boxplot(show.legend = FALSE) +
    geom_beeswarm(show.legend = FALSE, 
                 aes(shape = .data[[myfactor]],
                     fill = .data[[myfactor]]), 
                 method = "center", 
                 side = 0,
                 priority = "density", 
                 cex = cex, 
                 size = size, 
                 corral = "wrap",
                 corral.width = corral.width) +
    scale_x_discrete(labels = function(x) {
        # Extract just the timepoint part for x-axis labels
        sapply(strsplit(x, "\\."), `[`, 1)
    }) + theme_bw() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))




  plot <- ggplot(data, aes(x =.data[[myfactor]], y = .data[[var]])) +
    geom_boxplot(show.legend = FALSE) +
    geom_beeswarm(show.legend = FALSE, aes(shape = .data[[myfactor]],
      fill = .data[[myfactor]]), method = "center", side = 0,
      priority = "density", cex = cex, size = size, corral = "wrap",
      corral.width = corral.width) +
    scale_shape_manual(values = shape_palette) +
    scale_fill_manual(values = fill_palette) +
    labs(title = wrapped_title, x = NULL, y = NULL) + theme_bw() +
    theme(panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(),
          plot.title = element_text(hjust = 0.5, size = 8))

  if (statLines==TRUE){

    if (!is.null(statsHeight)){
      FirstY <- statsHeight * 1.1
      SingleY <- statsHeight * 1.1
      SecondY<- statsHeight * 1.2
      ThirdY <- statsHeight * 1.1
    }

  if (Method %in% c("Two Sample t-test",
      "Wilcoxon rank sum test with continuity correction", "Wilcoxon rank sum exact test")){
    plot <- plot + geom_line(data=tibble(x=c(1,2), y=c(SingleY, SingleY)),
      aes(x=x, y=y), inherit.aes = FALSE)+
      geom_line(data=tibble(x=c(1,1), y=c(SingleY*0.98,SingleY*1.02)),
                aes(x=x, y=y), inherit.aes = FALSE)+
      geom_line(data=tibble(x=c(2,2), y=c(SingleY*0.98,SingleY*1.02)),
                aes(x=x, y=y), inherit.aes = FALSE) +
      geom_text(data=tibble(x=1.5, y=SingleY*1.04),
          aes(x=x, y=y, label = SingleP), size = 4, inherit.aes = FALSE) +
      labs(caption = Method)
  } else if (Method %in% c("One-way Anova", "Kruskal-Wallis rank sum test")){
    plot <- plot + geom_line(data=tibble(x=c(1,3), y=c(SingleY, SingleY)),
                     aes(x=x, y=y), inherit.aes = FALSE) +
      geom_line(data=tibble(x=c(1,1), y=c(SingleY*0.98,SingleY*1.02)),
                aes(x=x, y=y), inherit.aes = FALSE) +
      geom_line(data=tibble(x=c(3,3), y=c(SingleY*0.98,SingleY*1.02)),
                aes(x=x, y=y), inherit.aes = FALSE) +
      geom_text(data=tibble(x=2, y=SingleY*1.04), aes(x=x, y=y, label = SingleP),
                size = 4, inherit.aes = FALSE) +
      labs(caption = Method)
  } else if (Method %in% c("Pairwise t-test", "Pairwise Wilcox test")) {
    plot <- plot + geom_line(data=tibble(x=c(1,1.9), y=c(FirstY, FirstY)), aes(x=x, y=y),
                     inherit.aes = FALSE)+
      geom_line(data=tibble(x=c(1,1), y=c(FirstY*0.98,FirstY*1.02)),
                aes(x=x, y=y), inherit.aes = FALSE)+
      geom_line(data=tibble(x=c(1.9,1.9), y=c(FirstY*0.98,FirstY*1.02)),
                aes(x=x, y=y), inherit.aes = FALSE) +
      geom_text(data=tibble(x=1.5, y=FirstY*1.04), aes(x=x, y=y, label = FirstP),
                size = 4, inherit.aes = FALSE) +
      geom_line(data=tibble(x=c(2.1,3), y=c(ThirdY, ThirdY)),
                aes(x=x, y=y), inherit.aes = FALSE)+
      geom_line(data=tibble(x=c(2.1,2.1), y=c(ThirdY*0.98,ThirdY*1.02)),
                aes(x=x, y=y), inherit.aes = FALSE)+
      geom_line(data=tibble(x=c(3,3), y=c(ThirdY*0.98,ThirdY*1.02)),
                aes(x=x, y=y), inherit.aes = FALSE) +
      geom_text(data=tibble(x=2.55, y=ThirdY*1.04), aes(x=x, y=y, label = ThirdP),
                size = 4, inherit.aes = FALSE)+
      geom_line(data=tibble(x=c(1,3), y=c(SecondY, SecondY)), aes(x=x, y=y),
                inherit.aes = FALSE)+
      geom_line(data=tibble(x=c(1,1), y=c(SecondY*0.98,SecondY*1.02)),
                aes(x=x, y=y), inherit.aes = FALSE)+
      geom_line(data=tibble(x=c(3,3), y=c(SecondY*0.98,SecondY*1.02)),
                aes(x=x, y=y), inherit.aes = FALSE) +
      geom_text(data=tibble(x=2, y=SecondY*1.04), aes(x=x, y=y, label = SecondP),
                size = 4, inherit.aes = FALSE) +
      labs(caption = Method)
  } else {message("Test type not recognized")}
  } else {
    if(!is.null(statsHeight)){plot <- plot + lims(y=c(0,statsHeight))
    }
  }

  if (scalePercent == TRUE){
    if (is.null(statsHeight)){
    plot <- plot + scale_y_continuous(labels = scales::percent)
      } else if (is.null(statLines)){plot <- plot + 
        scale_y_continuous(labels = scales::percent, limits=c(0, statsHeight))
      } else{plot <- plot + 
        scale_y_continuous(labels = scales::percent, limits=c(0, statsHeight * 1.3))
      }
    }

```


