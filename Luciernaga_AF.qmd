---
title: "LuciernagaAF"
format: html
---

# Load Library

```{r}
#| warning: FALSE
#| message: FALSE
library(flowCore)
library(flowWorkspace)
library(openCyto)
library(stringr)
library(data.table)
library(Luciernaga)
library(dplyr)
```

```{r}
Location <- HEULog::ExternalDriveLocate(Experiment="AlphaBeta")
Location <- file.path(Location, "Autofluorescence")
FCSFiles <- list.files(Location, pattern=".fcs", full.names=TRUE, recursive=FALSE)
Samples <- FCSFiles[!stringr::str_detect(FCSFiles, "Reference")]
```

```{r}
ExperimentsPresent <- sub("-.*", "", basename(Samples)) |> unique()
```

```{r}
#| eval: FALSE

# Setup for data folder and ProcessedExperiments.csv
IsDataPresent <- list.files(include.dirs=TRUE)
if (!any(IsDataPresent %in% "data")){dir.create("data")}
CSVFiles <- list.files("data", pattern="VisualizedExperiments_AF.csv")

if (length(CSVFiles) == 0){
    ProcessedExperiments <- data.frame(Experiment="Test", Date="2000-01-01")
    filename <- "VisualizedExperiments_AF.csv"
    StorageLocation <- file.path("data", filename)
    write.csv(ProcessedExperiments, StorageLocation, row.names=FALSE)
}
```

```{r}
CSV <- paste(                                                
      "https://raw.githubusercontent.com",                  
      "DavidRach", "AlphaBeta",                   
      "main", "data", "VisualizedExperiments_AF.csv",                              
      sep = "/") 

CSV <- "data/VisualizedExperiments_AF.csv"

Data <- read.csv(CSV, check.names=FALSE)
AlreadyVisualized <- Data |> pull(Experiment)

#walk(.f=ExperimentVisualized, .x=ExperimentsPresent, visualized=AlreadyVisualized, files=Samples, conditions=c("Ctrl", "PPD", "SEB"), template="GatesUnmixed.csv", UnityY="Spark Blue 550-A", UnityX="Pacific Blue-A")


```

# Processing

```{r}
x=ExperimentsPresent[1]
visualized=AlreadyVisualized
files=Samples
template <- "GatesRaw.csv"
experimentdesignation <- "AB"
GatePlots=TRUE

AutofluoresceShop <- function(x, visualized, files, experimentdesignation="AB",
template, GatePlots=TRUE){

  Status <- x %in% visualized
  ExperimentName <- x
  if (Status == TRUE){return(Status)}

  internalfiles <- files[grep(ExperimentName, files)]

  # experimentdesignation <- "AB"
  Experiment <- sub(paste0("_", experimentdesignation, ".*"), "", ExperimentName)
  Experiment <- gsub("_", "-", Experiment)

  LabFiles <- list.files("LabNotebook", include.dirs=TRUE)
  if (!Experiment %in% LabFiles)(stop("LabNotebook for ", Experiment, " is not present"))
  
  Notebook <- file.path("LabNotebook", Experiment)
  NotebookFiles <- list.files(Notebook, include.dirs=TRUE)

  if (!"Autofluorescence" %in% NotebookFiles){
      Autofluorescence <- file.path(Notebook, "Autofluorescence")
      dir.create(Autofluorescence)
  } else {Autofluorescence <- file.path(Notebook, "Autofluorescence")}

  MyCytoSet <- load_cytoset_from_fcs(internalfiles,
   truncate_max_range = FALSE, transform = FALSE)
  MyGatingSet <- GatingSet(MyCytoSet)

  RawGates <- data.table::fread(template)
  RawGating <- gatingTemplate(RawGates)
  gt_gating(RawGating, MyGatingSet)

  if (GatePlots == TRUE){
  Plots <- purrr::map(.x=MyGatingSet, .f=Utility_GatingPlots,
   sample.name=c("GROUPNAME", "TUBENAME"),
   removestrings=c("Unmixed", "(", ")", ".fcs"),
   gtFile=RawGates, 
   outpath=NULL,
   returnType="patchwork",
   plotname=TRUE)

  fileName <- ExperimentName
  fileName <- paste(fileName, "AutofluorescenceGating", sep="_")

  Utility_Patchwork(x=Plots, filename=fileName, outfolder=Autofluorescence,
  thecolumns = 1, therows=1, returntype="pdf", NotListofList = FALSE,
  patches=TRUE)
  }

  FileLocation <- system.file("extdata", package = "Luciernaga")
  pattern = "AutofluorescentOverlaps.csv"
  AFOverlap <- list.files(path=FileLocation, pattern=pattern,
                          full.names = TRUE)

  





}
```



```{r}
removestrings <- ".fcs"

outpath <- path

TargetFolder <- file.path(outpath, "LuciernagaOutputs")

if (!dir.exists(TargetFolder)){dir.create(TargetFolder)}

UnstainedSignature <- Luciernaga_QC(x=MyGatingSet[1],
                                    subsets="monocytes", 
                                    removestrings=removestrings,
                                    sample.name="GUID",
                                    unmixingcontroltype = "cells",
                                    Unstained = TRUE, 
                                    ratiopopcutoff = 0.01,
                                    Verbose = TRUE,
                                    AFOverlap = AFOverlap,
                                    stats = "median",
                                    ExportType = "fcs",
                                    SignatureReturnNow = FALSE,
                                    outpath = TargetFolder,
                                    Increments=0.1, experiment="Test",
                                    condition="test", 
                                    minimalfcscutoff = 0.01, 
                                    NegativeType="artificial")

#View(UnstainedSignature)
#colnames(UnstainedSignature)
```

```{r}
UnstainedSignature_Data <- Luciernaga_QC(x=MyGatingSet[1],
                                    subsets="monocytes", 
                                    removestrings=removestrings,
                                    sample.name="GUID",
                                    unmixingcontroltype = "cells",
                                    Unstained = TRUE, 
                                    ratiopopcutoff = 0.01,
                                    Verbose = TRUE,
                                    AFOverlap = AFOverlap,
                                    stats = "median",
                                    ExportType = "data",
                                    SignatureReturnNow = FALSE,
                                    outpath = outpath,
                                    Increments=0.1, experiment="Test",
                                    condition="test")

#View(UnstainedSignature)
#colnames(UnstainedSignature)
```

```{r}
library(dplyr)

DecisionData <- UnstainedSignature_Data |> mutate(MainDetector = gsub("_.*", "", UnstainedSignature_Data$Cluster)) |> group_by(MainDetector) |> slice_head(n = 3) |> ungroup()

Clusters <- sub("_.*", "", DecisionData$Cluster)

ClustersData <- data.frame(table(Clusters)) |> arrange(desc(Freq)) |> pull(Clusters)
```

```{r}

#' @importFrom dplyr select filter pull
#' @importFrom stringr str_detect
#' @importFrom plotly ggplotly
SignatureVariants <- function(x, data, returnType, legend){
  x <- as.character(x)

  UnstainedSignature1 <- data |>
     dplyr::select(-Sample, -Experiment, -Condition, -Count)

  These <- UnstainedSignature1  |> dplyr::filter(stringr::str_detect(Cluster, paste0("^", x))) |> dplyr::pull(Cluster) |> unique()

  Plots <- Luciernaga::QC_ViewSignature(x=These, columnname="Cluster", data=UnstainedSignature1, Normalize=TRUE,TheFormat="wider", legend=legend)

  if (returnType == "plots"){
    return(Plots)
    } else {
      Plots <- plotly::ggplotly(Plots)
      return(Plots)
    }
}
```

```{r}
Plots <- purrr::map(.x=ClustersData, .f=SignatureVariants, data=DecisionData, returnType="plots", legend=TRUE)

thefilename <- paste0("Signatures_", thenumber)

Utility_Patchwork(x=Plots, filename=thefilename, outfolder=TargetFolder, therows=3, thecolumns=1)
```


```{r}
print("Go!")
```
