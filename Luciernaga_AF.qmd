---
title: "LuciernagaAF"
format: html
---

# Load Library

```{r}
#| warning: FALSE
#| message: FALSE
library(flowCore)
library(flowWorkspace)
library(openCyto)
library(stringr)
library(data.table)
library(Luciernaga)
library(dplyr)
```

```{r}
Location <- HEULog::ExternalDriveLocate(Experiment="AlphaBeta")
Location <- file.path(Location, "Autofluorescence")
FCSFiles <- list.files(Location, pattern=".fcs", full.names=TRUE, recursive=FALSE)
Samples <- FCSFiles[!stringr::str_detect(FCSFiles, "Reference")]
```

```{r}
ExperimentsPresent <- sub("-.*", "", basename(Samples)) |> unique()
```

```{r}
#| eval: FALSE

# Setup for data folder and ProcessedExperiments.csv
IsDataPresent <- list.files(include.dirs=TRUE)
if (!any(IsDataPresent %in% "data")){dir.create("data")}
CSVFiles <- list.files("data", pattern="VisualizedExperiments_AF.csv")

if (length(CSVFiles) == 0){
    ProcessedExperiments <- data.frame(Experiment="Test", Date="2000-01-01")
    filename <- "VisualizedExperiments_AF.csv"
    StorageLocation <- file.path("data", filename)
    write.csv(ProcessedExperiments, StorageLocation, row.names=FALSE)
}
```

```{r}
CSV <- paste(                                                
      "https://raw.githubusercontent.com",                  
      "DavidRach", "AlphaBeta",                   
      "main", "data", "VisualizedExperiments_AF.csv",                              
      sep = "/") 

CSV <- "data/VisualizedExperiments_AF.csv"

Data <- read.csv(CSV, check.names=FALSE)
AlreadyVisualized <- Data |> pull(Experiment)

#walk(.f=ExperimentVisualized, .x=ExperimentsPresent, visualized=AlreadyVisualized, files=Samples, conditions=c("Ctrl", "PPD", "SEB"), template="GatesUnmixed.csv", UnityY="Spark Blue 550-A", UnityX="Pacific Blue-A")


```

# Processing

```{r}
x=ExperimentsPresent[1]
visualized=AlreadyVisualized
files=Samples[1]
template <- "GatesRaw.csv"
experimentdesignation <- "AB"
GatePlots=TRUE
TheN <- 3
Display <- "selection"

AutofluoresceShop <- function(x, visualized, files, experimentdesignation="AB",
template, GatePlots=TRUE, TheN=3, Display="selection"){

  Status <- x %in% visualized
  ExperimentName <- x
  if (Status == TRUE){return(Status)}

  internalfiles <- files[grep(ExperimentName, files)]

  # experimentdesignation <- "AB"
  Experiment <- sub(paste0("_", experimentdesignation, ".*"), "", ExperimentName)
  Experiment <- gsub("_", "-", Experiment)

  LabFiles <- list.files("LabNotebook", include.dirs=TRUE)
  if (!Experiment %in% LabFiles)(stop("LabNotebook for ", Experiment, " is not present"))
  
  Notebook <- file.path("LabNotebook", Experiment)
  NotebookFiles <- list.files(Notebook, include.dirs=TRUE)

  if (!"Autofluorescence" %in% NotebookFiles){
      Autofluorescence <- file.path(Notebook, "Autofluorescence")
      dir.create(Autofluorescence)
  } else {Autofluorescence <- file.path(Notebook, "Autofluorescence")}

  MyCytoSet <- load_cytoset_from_fcs(internalfiles,
   truncate_max_range = FALSE, transform = FALSE)
  MyGatingSet <- GatingSet(MyCytoSet)

  RawGates <- data.table::fread(template)
  RawGating <- gatingTemplate(RawGates)
  gt_gating(RawGating, MyGatingSet)

  if (GatePlots == TRUE){
  Plots <- purrr::map(.x=MyGatingSet, .f=Utility_GatingPlots,
   sample.name=c("GROUPNAME", "TUBENAME"),
   removestrings=c("Unmixed", "(", ")", ".fcs"),
   gtFile=RawGates, 
   outpath=NULL,
   returnType="patchwork",
   plotname=TRUE)

  fileName <- ExperimentName
  fileName <- paste(fileName, "AutofluorescenceGating", sep="_")

  Utility_Patchwork(x=Plots, filename=fileName, outfolder=Autofluorescence,
  thecolumns = 1, therows=1, returntype="pdf", NotListofList = FALSE,
  patches=TRUE)
  }

  FileLocation <- system.file("extdata", package = "Luciernaga")
  pattern = "AutofluorescentOverlaps.csv"
  AFOverlap <- list.files(path=FileLocation, pattern=pattern,
                          full.names = TRUE)

  Tags <- file.path(Autofluorescence, "Tags")
  if (!dir.exists(Tags)){dir.create(Tags)}

  LuciernagaTemp <- file_temp("Luciernaga_Temp_")
  dir.create(LuciernagaTemp)
  #dir.exists(LuciernagaTemp)
  dir_ls(LuciernagaTemp, glob = "*.fcs")

  ReturnedFCS <- purrr::map(.x=MyGatingSet[1], .f=Luciernaga_QC, subsets="lymphocytes", removestrings=".fcs", 
  sample.name=c("GROUPNAME", "TUBENAME"), unmixingcontroltype = "cells",
  Unstained = TRUE, ratiopopcutoff = 0.01, Verbose = FALSE,
  AFOverlap = AFOverlap, stats = "median", ExportType = "fcs",
  SignatureReturnNow = FALSE, outpath = LuciernagaTemp, Increments=0.1, experiment=ExperimentName, condition="NA", minimalfcscutoff = 0.01, 
  NegativeType="artificial")

  # x <- MyGatingSet[1]
  ReturnedOutputs <- map(.x=MyGatingSet, .f=LuciernagaLocal,
   outpath=Tags, TheN=TheN, Display=Display,
   ExperimentName=ExperimentName)

  thefilename <- paste0("Signatures_", thenumber)

  Utility_Patchwork(x=Plots, filename=thefilename,
  outfolder=TargetFolder, therows=3, thecolumns=1)
}

LuciernagaLocal <- function(x, outpath, TheN, Display, ExperimentName){
  LuciernagaTemp <- file_temp("Luciernaga_Temp_")
  dir.create(LuciernagaTemp)
  # dir.exists(LuciernagaTemp)
  TheTempFiles <- dir_ls(LuciernagaTemp, glob = "*.fcs")

  first <- keyword(x, "GROUPNAME")
  second <- keyword(x, "TUBENAME")
  LocalPlotName <- paste(first, second, sep="_")

  ReturnedFCS <- purrr::map(.x=x, .f=Luciernaga_QC, subsets="lymphocytes",
  removestrings=".fcs", 
  sample.name=c("GROUPNAME", "TUBENAME"), unmixingcontroltype = "cells",
  Unstained = TRUE, ratiopopcutoff = 0.01, Verbose = FALSE,
  AFOverlap = AFOverlap, stats = "median", ExportType = "fcs",
  SignatureReturnNow = FALSE, outpath = LuciernagaTemp, Increments=0.1, experiment=ExperimentName, condition="NA", minimalfcscutoff = 0.001, 
  NegativeType="artificial")

  ReturnedFCS <- ReturnedFCS[[1]]

  DecisionData <- ReturnedFCS |>
     mutate(MainDetector = gsub("_.*", "", .data[["Cluster"]])) |>
     group_by(MainDetector) |> slice_head(n = TheN) |> ungroup()

  Clusters <- sub("_.*", "", DecisionData$Cluster)
  ClustersData <- data.frame(table(Clusters)) |> arrange(desc(Freq)) |> pull(Clusters)

  TheseSpecimens <- DecisionData |> mutate(Cluster = gsub("_", "", Cluster)) |>
    mutate(Cluster = gsub("-", "", Cluster)) |> 
    mutate(ID = paste(Sample, Cluster, sep="_")) |> pull(ID)

  TheseSpecimens <- paste0(TheseSpecimens, ".fcs")

  CopyThese <- TheTempFiles[basename(TheTempFiles) %in% TheseSpecimens]

  file_copy(CopyThese, outpath)

  if (Display=="selection"){
    DataToUse <- DecisionData
    TheLegend <- TRUE
    } else {
    DataToUse <- ReturnedFCS
    TheLegend <- FALSE}

  Plots <- purrr::map(.x=ClustersData, .f=SignatureVariants, data=DataToUse, returnType="plots", legend=TheLegend, plotname=LocalPlotName)

  dir_delete(LuciernagaTemp)
  #dir.exists(LuciernagaTemp)

  ReturnObjects <- list(Data=ReturnedFCS, Plots=Plots)
  return(ReturnObjects)
}

#' @importFrom dplyr select filter pull
#' @importFrom stringr str_detect
#' @importFrom plotly ggplotly
SignatureVariants <- function(x, data, returnType, legend, plotname){
  x <- as.character(x)

  UnstainedSignature1 <- data |>
     dplyr::select(-Sample, -Experiment, -Condition, -Count)

  These <- UnstainedSignature1  |> dplyr::filter(stringr::str_detect(Cluster, paste0("^", x))) |> dplyr::pull(Cluster) |> unique()

  Plots <- Luciernaga::QC_ViewSignature(x=These, columnname="Cluster", data=UnstainedSignature1, Normalize=TRUE,TheFormat="wider", legend=legend,
  plotname=plotname)

  if (returnType == "plots"){
    return(Plots)
    } else {
      Plots <- plotly::ggplotly(Plots)
      return(Plots)
    }
}
```

